#
# This test checks the corect operation with respect to padding and non-padding
# string key collations
#

--source collation_prepare.inc

#
# Create a table with a binary collation that does not pad strings
#
--connection node_1
CREATE TABLE tcoll (string VARBINARY(16) PRIMARY KEY, node INTEGER) ENGINE=InnoDB;
--let $expect_rows = 2

--source collation_begin.inc

#
# Send potentially conflicting transactions
#
--connection node_1a
--send INSERT INTO tcoll VALUES (0x616263, 1);
--connection node_2a
--send INSERT INTO tcoll VALUES (0x61626300, 2);

--source collation_end.inc

#
# Create a table with a abinary collation that does pad strings
#
--connection node_1
CREATE TABLE tcoll (string BINARY(16) PRIMARY KEY, node INTEGER) ENGINE=InnoDB;
--let $expect_rows = 1

--source collation_begin.inc

#
# Send potentially conflicting transactions
#
--connection node_1a
--send INSERT INTO tcoll VALUES (0x616263, 1);
--connection node_2a
--send INSERT INTO tcoll VALUES (0x61626300, 2);

--source collation_end.inc

#
# Create a table with a collation that pads strings
#
--connection node_1
CREATE TABLE tcoll (string VARCHAR(16) CHARSET utf8 COLLATE utf8_bin PRIMARY KEY, node INTEGER) ENGINE=InnoDB;
--let $expect_rows = 1

--source collation_begin.inc

#
# Send potentially conflicting transactions
#
--connection node_1a
--send INSERT INTO tcoll VALUES ('abc', 1);
--connection node_2a
--send INSERT INTO tcoll VALUES ('abc ', 2);

--source collation_end.inc

#
# Create a table with a collation that pads strings
#
--connection node_1
CREATE TABLE tcoll (string VARCHAR(16) CHARSET utf8 COLLATE utf8_general_ci PRIMARY KEY, node INTEGER) ENGINE=InnoDB;
--let $expect_rows = 1

--source collation_begin.inc

#
# Send potentially conflicting transactions
#
--connection node_1a
--send INSERT INTO tcoll VALUES ('abc', 1);
--connection node_2a
--send INSERT INTO tcoll VALUES ('abc ', 2);

--source collation_end.inc
